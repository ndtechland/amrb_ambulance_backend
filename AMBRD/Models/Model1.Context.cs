//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AMBRD.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class abdul_amurdEntities11 : DbContext
    {
        public abdul_amurdEntities11()
            : base("name=abdul_amurdEntities11")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AboutContent> AboutContents { get; set; }
        public DbSet<AboutContentService> AboutContentServices { get; set; }
        public DbSet<AdminLogin> AdminLogins { get; set; }
        public DbSet<Ambulance> Ambulances { get; set; }
        public DbSet<BankDetail> BankDetails { get; set; }
        public DbSet<Banner> Banners { get; set; }
        public DbSet<Blog> Blogs { get; set; }
        public DbSet<Booking> Bookings { get; set; }
        public DbSet<CityMaster> CityMasters { get; set; }
        public DbSet<ContactU> ContactUs { get; set; }
        public DbSet<Driver> Drivers { get; set; }
        public DbSet<DriverLocation> DriverLocations { get; set; }
        public DbSet<Gallery> Galleries { get; set; }
        public DbSet<Hospital> Hospitals { get; set; }
        public DbSet<NearDriver> NearDrivers { get; set; }
        public DbSet<OtherService> OtherServices { get; set; }
        public DbSet<OurService> OurServices { get; set; }
        public DbSet<Patient> Patients { get; set; }
        public DbSet<StateMaster> StateMasters { get; set; }
        public DbSet<Testimonial> Testimonials { get; set; }
        public DbSet<VehicleCategory> VehicleCategories { get; set; }
        public DbSet<VehicleType> VehicleTypes { get; set; }
        public DbSet<PatientComplaint> PatientComplaints { get; set; }
        public DbSet<UserOfferPrice> UserOfferPrices { get; set; }
        public DbSet<DriverBooking> DriverBookings { get; set; }
        public DbSet<CommissionMaster> CommissionMasters { get; set; }
        public DbSet<DriverPayOut> DriverPayOuts { get; set; }
    
        public virtual int DeleteNearDriver()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNearDriver");
        }
    
        public virtual ObjectResult<GetNearDriver_Result> GetNearDriver(Nullable<int> driverId, Nullable<int> kM, string name, string dL, Nullable<int> charge, string deviceId, Nullable<int> totalDistance)
        {
            var driverIdParameter = driverId.HasValue ?
                new ObjectParameter("DriverId", driverId) :
                new ObjectParameter("DriverId", typeof(int));
    
            var kMParameter = kM.HasValue ?
                new ObjectParameter("KM", kM) :
                new ObjectParameter("KM", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dLParameter = dL != null ?
                new ObjectParameter("DL", dL) :
                new ObjectParameter("DL", typeof(string));
    
            var chargeParameter = charge.HasValue ?
                new ObjectParameter("Charge", charge) :
                new ObjectParameter("Charge", typeof(int));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var totalDistanceParameter = totalDistance.HasValue ?
                new ObjectParameter("TotalDistance", totalDistance) :
                new ObjectParameter("TotalDistance", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNearDriver_Result>("GetNearDriver", driverIdParameter, kMParameter, nameParameter, dLParameter, chargeParameter, deviceIdParameter, totalDistanceParameter);
        }
    }
}
